// src/App.jsimport React, { useState, useEffect } from 'react';import axios from 'axios';import CitySearch from './Components/CitySearch';import WeatherDisplay from './Components/WeatherDisplay';import SavedLocations from './Components/SavedLocations';import MapDisplay from './Components/MapDisplay';import './App.css';const App = () => {  const [city, setCity] = useState('');  const [weatherData, setWeatherData] = useState(null);  const [savedLocations, setSavedLocations] = useState([]);  const [, setInitialSearch] = useState('');  const [selectedOption, setSelectedOption] = useState(null);  const saveLocation = () => {    if (city && !savedLocations.includes(city)) {      const updatedLocations = [...savedLocations, city];      setSavedLocations(updatedLocations);      localStorage.setItem('savedLocations', JSON.stringify(updatedLocations));    }  };  const handleCitySelect = async (selectedCity) => {    if (!selectedCity?.lat || !selectedCity?.lon) return;    setCity(selectedCity.name);    const option = {      value: selectedCity,      label: `${selectedCity.name}, ${new Intl.DisplayNames(['ru'], {type: 'region'}).of(selectedCity.country)}`    };    setSelectedOption(option);    localStorage.setItem('lastSelectedCity', JSON.stringify(selectedCity));    try {      const response = await axios.get(          `https://api.openweathermap.org/data/2.5/weather`,          {            params: {              lat: selectedCity.lat,              lon: selectedCity.lon,              appid: '92b3a1df70c04ac1a61d74a5cc9b2e58',              units: 'metric',              lang: 'ru',            },          }      );      setWeatherData(response.data);    } catch (error) {      console.error('Ошибка загрузки погоды:', error);    }  };  useEffect(() => {    const saved = JSON.parse(localStorage.getItem('savedLocations')) || [];    setSavedLocations(saved);    const lastCity = JSON.parse(localStorage.getItem('lastSelectedCity'));    if (lastCity) {      setInitialSearch(lastCity.name);      handleCitySelect(lastCity);    }  }, []);  useEffect(() => {    if (!weatherData) {      document.body.classList.remove('night');      document.body.classList.add('day');      return;    }    const now = Math.floor(Date.now() / 1000);    const localTime = now + weatherData.timezone;    const sunrise = weatherData.sys.sunrise + weatherData.timezone;    const sunset = weatherData.sys.sunset + weatherData.timezone;    const isNight = localTime < sunrise || localTime > sunset;    document.body.classList.remove('day', 'night');    document.body.classList.add(isNight ? 'night' : 'day');  }, [weatherData]);  return (      <div className="App">        <h1>Прогноз погоды</h1>        <div className="main-content">          <div className="weather-info">            <CitySearch                onCitySelect={handleCitySelect}                selectedOption={selectedOption}                width={savedLocations.length === 0 ? '500px' : undefined}            />            {weatherData && <WeatherDisplay weatherData={weatherData} />}          </div>          {weatherData && (              <div className="map-section">                <MapDisplay                    lat={weatherData.coord.lat}                    lon={weatherData.coord.lon}                    city={city}                />                <button className="save-button-small" onClick={saveLocation}>                  Сохранить                </button>                <SavedLocations                    locations={savedLocations}                    onLocationSelect={handleCitySelect}                />              </div>          )}        </div>      </div>  );};export default App;